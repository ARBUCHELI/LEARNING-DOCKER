* 4. When Things Go Wrong
-------------------------

* Help! I can't seem to create more containers
----------------------------------------------

* Example:
----------
	YOU TYPE THIS COMMAND

$ docker run --name=app --rm openjdk:19

	AND SUDDENLY YOU SEE A MESSAGE LIKE THIS (AMONG A LOT OF OTHER TEXT)

: no space left on device: unknown.

	YOU RUN THE FOLLOWING COMMAND TO SEE IF YOU HAVE OR NOT SPACE

$ df - h

	HOW TO FIX IT

$ docker images

	TO REMOVE IMAGES THAT WE ARE NOT LONGER USING)

* Example:
----------
$ docker rmi carlosnunez/xq nginx selenium/standalone-chrome selenium/standalone-firefox

	THE NEXT COMMAND SMARTLY REMOVES USELESS DATA THAT'S BURNING A LOE IN OUR DISC

$ docker system prune

	NOW IF YOU TRY TO RUN THE FIRST COMMAND AGAIN, YOU'LL BE SUCCESSFUL

$ docker run --name=app --rm openjdk:19


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Help! My container is really slow
-----------------------------------

$ docker stats (THIS GIVES YOU A SNAPSHOT OF YOUR CONTAINE'S PERFORMANCE AS IT'S RUNNING)

$ docker run --name=alpine --entrypoint=sleep -d alpine infinity (--entrypoint=sleep, AND infinity ARE USED TO PUT THE CONTAINER TO SLEEP FOREVER)

$ docker ps

$ docker stats alpine

	IN ANOTHER TERMINAL START A SHELL INTO THE CONTAINER

$ docker exec -i -t alpine sh

	THEN RUN THE yes PROGRAM TO SET UP THE CPU ON FIRE (THIS WILL PRINT y INDEFINITELY)

/ # yes

	TO MONITOR THE PROCESS

* Example
---------
Let's say that we have

$ docker exec -d alpine sleep infinity
$ docker exec -d alpine sleep infinity
$ docker exec -d alpine sleep infinity

$ docker top alpine (TO SEE THE RUNNING PROCESSES)

	TO SHOW ADVANCED INFORMATION ABOUT A CONTAINER THAT'S RUNNING IN JSON FORMAT (ALSO VERY CONVENIENT FOR SCRIPTING AGAINST DOCKER)

$ docker inspect alpine

	TO GIVE A MORE CONVENIENT AND EASY TO READ OUTPUT

$ docker inspect alpine | less

	TO SEND THE DATA INTO A VIEWER (THIS IS ALSO CALLED PAGINATING)

: Restarting
: RestarCount
: Mounts


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Challenge: Fix a broken container
-----------------------------------

* Challenge
-----------
Fix a broken container

* Challenge 2
-------------
. Fix the Dockerfile and script provided

. You will see the below when the container is working properly


* Hints
-------
. Use the -it flag when you run your container

. Use docker ps and docker rm in another terminal if yours hangs!

. No shell scripting experience required, but consult any docs your need!


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Solution: Fix a brokekn container
-----------------------------------

$ ls

$ docker build -t app .

>> DOCKER CAN'T FILE THE IMAGE

	 HOW TO FIX IT

$ https://wwww.docker.com  

	FIND UBUNTU FOR USING IT

$ vim Dockerfile

# HINT: Remember that you can find `ubuntu` images in the Docker Hub!
FROM ubuntu:xeniall ---> THE ERROR IS HERE IN THE Dockerfile

COPY /app.sh /
RUN chmod +x /app.sh

ENTRYPOINT [ "/app.sh" ]

	FIX THE DOCKERFILE

# HINT: Remember that you can find `ubuntu` images in the Docker Hub!
FROM ubuntu:xenial ---> THE ERROR IS HERE IN THE Dockerfile

COPY /app.sh /
RUN chmod +x /app.sh

ENTRYPOINT [ "/app.sh" ]

	AND RUN THE COMMAND AGAIN

$ docker build -t app .

	AFTER RUNNING THE FOLLOWING COMMAND, THE APP STARTS TO BEGIN PROCESSING BUT VERY SLOWLY

$ docker run -it app

	LET'S RUN THE CONTAINER AGAIN WITH A NAME THIS TIME (WE'LL USE THE NAME IN OTHER TERMINAL)

$ docker run -it --name=app_container app

	IN OTHER TERMINAL

$ docker stats app_container

$ docker top app_container

>> IN THE OUTPUT THERE IS SOMETHING WEIRD:  yes IS THERE AGAIN:

$ docker top app_container1
UID                 PID                 PPID                C                   STIME               TTY
       TIME                CMD
root                25152               25131               0                   13:13               ?
       00:00:00            bash /app.sh
root                25179               25152               0                   13:14               ?
       00:00:00            timeout 9 yes
root                25180               25179               99                  13:14               ?
       00:00:05            yes


	THIS MEANS THAT WE NEED TO MODIFY THE APP

	TO SOLVE IT WE NEED TO MODIFY THE Dockerfile 

	BUT WE NEED TO EDIT app.sh

#!/usr/bin/env bash

start() {
  echo "Application starting"
}

process() {
  _process() {
    timeout "$((i*i))" yes &>/dev/null ---> HERE WE CAN FIND THE yes PROGRAM THAT CREATES SO MUCH TROUBLE
    echo "Application processing ($1/5)"
  }

  for i in $(seq 1 5)
  do _process "$i"
  done
}

finish() {
  echo "Application finished!"
}

start &&
  process &&
  finish


	WE NEED TO EDIT app.sh

#!/usr/bin/env bash

start() {
  echo "Application starting"
}

process() {
  _process() {
    echo "Application processing ($1/5)"
  }

  for i in $(seq 1 5)
  do _process "$i"
  done
}

finish() {
  echo "Application finished!"
}

start &&
  process &&
  finish


	AFTER THIS RUN THE COMMAND AGAIN

$ docker build -t app .

	NOW IT BUILDS REALLY QUICKLY

$ docker rm app_container

$ docker run -it --name=app_container app


	NOW IT RUNS REALLY FAST AND THAT PROVES THAT WE FIXED THE BROKEN CONTAINER!


------------------------------------------------------------------------------------------------------------------------------------------------------------------






















































	
















































	
	




 



