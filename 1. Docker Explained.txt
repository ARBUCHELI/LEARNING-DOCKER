# 1. Docker Explained
---------------------

* What is Docker?
-----------------
Applications working in one place but now others is a common problem in the world of software development.  So common in fact, that it's often called, the it works on my machine problem.


* Reasons This Happens
----------------------
1 Missing tools

2 Different configuration

3 Hardware dependencies


* Previous Solutions
--------------------
. Configuration Management

. Virtual machines as code


* Configuration management tools (Chef, Puppet, Ansible)
--------------------------------------------------------
Require knowledge about hardware and operating systems

* Virtual machines as code (Vagrant)
------------------------------------
Heavy, slowish, require inconvenient configuration


	* DOCKER USES IMAGES AND CONTAINERS TO ALLOW APPS TO RUN ANYWHERE, CONSISTENTLY.

	* UNLIKE VIRTUAL MACHINES, CONTAINERS ARE VIRTUALIZED OPERATING SYSTEMS THAT ARE CONFIGURED WITH JUST ENOUGH TO RUN YOUR APP AND NOTHING ELSE.

	* USING DOCKER IS KIND OF LIKE COOKING WITH PREMADE RECIPE BOXES.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Containers v. virtual machines
--------------------------------

* Containers vs. Virtual Machines
---------------------------------
. Containers are NOT smaller VMs.

. Hypervisors bridge VMs to their hosts.


	* VIRTUAL MACHINES RUN ON A PLATFORM CALLED A HYPERVISOR. THE HYPERVISOR'S MAIN JOB IS TO TRANSLATE OPERATIONS ON EMULATED HARDWARE WITHIN VIRTUAL MACHINES LIKE MEMORY PROCESSORS,
	DISKS, ETCETERA TO OPERATIONS ON REAL HARDWARE WITHIN THEIR HOSTS.  THIS ALLOWS FOR A LOT OF FLEXIBILITY, BUT COMES AT THE COST OF DISK SPACE.

* Virtual Machines
------------------
1 Use the hypervisor to emulate real hardware

2 Can take up a lot of space

3 Require YOU to install/configure operating system
	
4 Can run multiple apps at the same time

5 Cannot interact with their hosts


	* CONTAINERS ON THE OTHER HAND, RUN ON CONTAINER RUNTIMES (DOCKER) CONTAINER RUNTIMES WORK WITH THE OPERATING SYSTEM TO ALLOCATE HARDWARE AND COPY FILES AND DIRECTORIES, INCLUDING
	THE PARTS WITH YOUR APPLICATIONS IN IT, INTO SOMETHING THAT LOOKS MORE LIKE ANY OTHER APP RUNNING ON THAT SYSTEM.


* Containers
------------
1 Do not emulate any hardware and do not need to "boot up"

2 Do not require operating system installation

3 Take up much less space

4 Can run only one app at a time (by design)

5 Can interact with their hosts


* Containers vs. Virtual Machines
---------------------------------
			Containers					Virtual Machines
			----------					----------------
			. Run in container runtimes			. Run on top of hypervisors
			. Work alonside operaring systems		. Need hardware emulation
			. Do not require OS configuration 		. Require OS configuration
			. Run one app at a time (usually)		. Can run many apps at once


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The anatomy of a container
----------------------------
	* A CONTAINER IS COMPOSED OF TWO THINGS: Take into consideration that namespaces, and control groups and Linux only features.  That means that docker can run natively only on Linux.
		. A LINUX NAMESPACE
		. A LINUS CONTROL GROUP


		. NAMESPACES
		------------
		Linux kernel feature that provides the ability to expsoe different "views" of your system, to applications running within it.

		This way, you can have an application think it's running as they say, route supe user with access to an entire file system and all sorts of hardware when it's actually 
		running as user 154678 with acces to a single folder.


		* Namespaces
		------------
			Name				Description
			----				-----------
			USERNS				User lists
			MOUNT				Access to file systems
			NET				Network communication
			IPC				Interprocess communications
			TIME				The ability to change time (NOT SUPPORTED BY DOCKER!)
			CGROUP				Create control groups
			UTC				Create host/domain names




		* Control groups
		----------------
		Limit how much of any resource you can use.


* Control Group Uses
--------------------
1 Monitor and restrict CPU usage

2 Monitor and restrict network and disk bandwitdth

3 Monitor and restrict memory consumption

4 Assign disk quotas (NOT SUPPORTED BY DOCKER!)


* Docker Limitations
--------------------
. Natively only runs on Linux (and some newer versions of Windows as well)

. Container images are bound to their parent operating systems


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Docker Difference
-----------------------
	* WHILE DOCKER MIGHT BE THE FIRST THING THAT COMES TO MIND WHEN THINKING ABOUT CONTAINERS, DOCKER IS NOT THE FIRST OR THE ONLY WAY OF CREATING THEM.


* History of containers
-----------------------

. 1979 - 1982
-------------
chroot() is added to 4.2BSD, allowing administrators to change what applications can "see", even when running as root.


. 1999 - 2004
-------------
BSD jails and Solaris zones allow administrators to create entire virtual environments for applications.


. 2007
------
Linux Containers (LXC) brings BSC jail-like functionality to Linux.


* Docker Has Three Advantages
-----------------------------
. Dockerfiles make configuring and packaging apps and their environments really easy.

. The Docker Hub makes sharing images with anyone in the world easy.

. The Docker CLI makes it really easy to start your apps in containers.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

















	




	


		

		

	







 

















	






















