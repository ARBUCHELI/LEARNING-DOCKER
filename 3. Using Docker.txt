# 3. Using Docker
-----------------

* Exploring the Docker CLI
--------------------------

Examples of How to use --help

$ docker --help

$ docker network --help

$ docker network create --help


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Create a Docker container
---------------------------

	* CONTAINERS ARE CREATED FROM CONTAINER IMAGES. CONTAINER IMAGES ARE A COMPRESSED AND PRE-PACKAGED FILE SYSTEM THAT CONTAIN YOUR APP ALOG WITH ITS ENVIRONMENT AND CONFIGURATION
	WITH AN INSTRUCTION ON HOW TO START YOUR APPLICATION.


$ docker container create --help (To see how the docker container create commmand works)

. Example:
----------
$ docker container create hello-world:linux

In the output, the "Pull complete" message, will tell us that the pulling was successful.

$ docker ps (To list the containers that we've create)

$ docker ps --all (To see all the containers docker knows about)

$ docker container start f47cb1482e931ddc5aa04d928fb2894c30a0868df549c236349e6ddb4b9d0eae (To start a container)

. STATUS ---> Exited (0) 15 seconds ago ---> means that the entry point was executed successfully.

. To see some messages comming from our container we can type this:

$ docker logs f47 (The first three characters of the ID of our container).

	* ANOTHER WAY TO GET THIS OUTPUT WHITHOUT HAVING TO RESORT TO DOCKER LOGS EVERY TIME IS TO START THE CONTAINER AND "ATTACH" OUR TERMINAL TO THE CONTAINER'S OUTPUT

$ docker container start --attach f47


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Create a Docker container: The short way
------------------------------------------
$ docker run hello-world:linux

	docker run = docker container create + docker container start + docker container attach


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Create a Docker container from Dockerfiles, part 1
----------------------------------------------------
vim Dockerfile

FROM ubuntu (Tells docker which existing docker image to base your docker image off of. This can be any existing image, either local or from the Internet).

LABEL maintainer="Carlos Nunez <dev@carlosnunez.me>" (Maintainer).

USER root (Tells docker which user to use for any docker file command underneath it. By default, docker will use the "root user" to execute commands).

COPY ./entrypoint.bash / (Copies files from a directory provided to the Docker build command to the container image). The directory provided is usually called the context.  Usually is the
working directory but it hasn't to be.

RUN apt -y update (Run commands customize the image. This is a great place to install additional software or configure files needed by your application)
RUN apt -y install curl bash
RUN chmod 755 /entrypoint.bash

USER nobody (This sets the default users to the powerless nobody user.  This ensures that we can't break out of the container, and potentially change important files on our host).

ENTRYPOINT [ "/entrypoint.bash" ] (The entry point tells Docker what command containers created from this image should run. ( # CMD command can be used as well.)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Create a Docker container from Dockerfiles, part 2
----------------------------------------------------
$ docker build --help

$ docker build -t our-first-image .

$ docker run our-first-image


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Interact with your container
------------------------------
$ vim server.Dockerfile

OUTPUT:

FROM ubuntu
LABEL maintainer="Carlos Nunez <dev@carlosnunez.me>"

USER root
COPY ./server.bash /

RUN chmod 755 /server.bash
RUN apt -y update
RUN apt -y install bash

USER nobody

ENTRYPOINT [ "/server.bash" ]

$ docker build --file server.Dockerfile --tag our-first-server .

$ docker run our-first-server --> Containers are not interactive by default.  That means that containers won't accept key strokes by default.  
With this command the container won't stop. It will be necessary to open a new terminal, get the id of the container and run another command:

$ docker ps

$ docker kill b529

	TO WORK AROUND ISSUES LIKE THIS WE USE --d

$ docker run -d our-first-server

	docker exec WILL ALLOW US TO RUN ADDITIONAL COMMANDS FROM THIS CONTAINER

$ docker exec b3cb date

	YOU CAN EVEN USE exec TO START TERMINAL SESSIONS WITHIN THE CONTAINER

Let's say that we want to use a bash shell within the container to do this (for example for troubleshooting)

Since we are going to be entering keystrokes, we need to tell exec that this command needs to be interactive.

Additionally since we are starting a shell, we'll also need to tell Docker, that we'll need something called a quote, unquote, sudo TTY, so that our terminal can properly interact with 
the container's terminal.

$ docker exec --interactive --tty b3cb bash

$ Ctrl + d --> To get out of the container's terminal


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Stopping and removing the container
-------------------------------------
	DOCKER DOES NOT STOP OR REMOVE CONTAINERS FOR YOU

$ docker ps -a (To list all the containers)

$ docker stop fd69 (To stop containers)

	IF WE WANT TO FORCELLY STOP A CONTAINER TO OBLIGE IT TO STOP QUICKLY WE CAN TYPE

$ docker stop -t 0 

$ docker rm 79f6 (To remove containers)

$ docker rm -f (To remove containers that are running)

	IF WE WANT TO FORCELLY STOP A LIST OF CONTAINERS

$ docker ps -aq (To get the list of the ids of the containers)

	A PIPE SYMBOL WILL ALLOW YOU TO FEED THE OUTPUT FROM THE COMMAND IN THE LEFT, TO THE COMMAND ON THE RIGHT (THIS IS A LINUX TRICK)

$ docker ps -aq | xargs docker rm 

	WE ALSO CAN REMOVE IMAGES

$ docker rmi

. Example
---------
$ docker rmi our-first-server

	TO FORCE THE DELETION OF IMAGES

$ docker rmi -f (This force the removal but can lead to unpredictable behavior)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Binding ports to your container
---------------------------------
	DOCKER PROVIDES THE ABILITY TO ACCESS NETWORK PORTS WITHIN THE CONTAINER, WITH SOMETHING CALLED PORT BINDING.

$ docker build -t our-web-server -f web-server.Dockerfile .

$ docker run -d our-web-server

	IF WE GO TO localhost:5000, THAT WON'T WORK, BECAUSE WE NEED TO MAP PORT 5000 FROM WITHIN THE CONTAINER TO A PORT ON OUR ACTUAL MACHINE.

$ docker rm -f <id> or <name> (TO STOP AND REMOVE THE CONTAINER).

	-p THIS FLAG IS USED TO TELL DOCKER TO BIND PORTS.

$ docker run -d --name our-web-server -p 5001:5000 our web-server (MNEMONIC IS OUTSIDE / INSIDE)	

	NOW I GO TO PORT localhost:5001 THAT IS THE PORT THE CONTAINER IS MAPPED TO.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Saving data from containers
-----------------------------
	TO CREATE AND IMMEDIATELY REMOVE A CONTAINER

	--entrycpoint TO TELL DOCKER THAT I'M GOING TO USE A SHELL COMMAND

$ docker run --rm --entrypoint sh ubuntu -c "echo 'Hello there.'> /tmp/file && cat /tmp/file"

$ cat /tmp/file ---> No such file or directory (EVERYTHING YOU CREATE WITHIN A CONTAINER STAYS WITHIN THE CONTAINER, ONCE THE CONTAINER STOPS, THE DATA GETS DELETED WITH IT).


	WE CAN USE THE VOLUME MOUNTING FEATURE TO WORK AROUN THIS.

$ docker run --rm --entrypoint sh -v /tmp/container:/ubuntu ubuntu -c "echo 'Hello there.'> /tmp/file && cat /tmp/file"

	REMEMBER THAT IN LINUX cat IS USED TO RECOVER INFORMATION.


	WE CAN ALSO TRY TO MAP FILES ON OUR COMPUTER TO FILES IN THE CONTAINER.


$ touch /tmp/change_this_file

$ docker run --rm --entrypoint sh -v  /tmp/change_this_file:/tmp/file ubuntu - c "echo 'Hello there.'> /tmp/file && cat /tmp/file"


	IF WE DO THE FOLLOWING:

$ docker run --rm --entrypoint sh -v  /tmp/this_file_does_not_exist:/tmp/file ubuntu - c "echo 'Hello there.'> /tmp/file && cat /tmp/file"

>> OUTPUT >> sh: 1: cannot create /tmp/file: Is a directory (THIS IS THE FILE DOESN'T EXIST AND DOCKER ASSUMES IT WAS A DIRECTORY).


$ cat /tmp/this_file_does_not_exist

>> OUTPUT >> cat: /tmp/this_file_does_not_exist: Is a directory (IN THIS CASE, DOCKER ACTUALLY CREATED A DIRECTORY AND MOUNTED IT AS A DIRECTORY BEFORE IT RAN THE COMMAND).

	THE LESSON HERE IS TO MAKE SURE THAT YOU'RE MOUNTING REAL FILES IF YOU USE -v WITH FILES.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Introduction to Docker Hub
----------------------------
	CONTAINER IMAGES THAT DON'T HAVE A VERSION AUTOMATICALLY GET TAGGED WITH THE VERSION CALLED LATEST.


	DOCKER HUB IS THE DOCKER CLIENT'S DEFAULT CONTAINER IMAGE REGISTRY.


* Let's Push Our First Image!
-----------------------------
. Create an account on Docker-Hub

. Store our our-web-server Docker Image

. Create another version of our-web-server

. Push that version into Docker Hub


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Pushing images to the Docker registry
---------------------------------------
	CREATE AN ACCOUNT.

	LOG INTO DOCKER HUB FROM THE DOCKER CLI:

$ docker login

$ docker tag our-web-server carlosnunez/our-web-server:0.0.1

$ docker push carlosnunez/our-web-server:0.0.1


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Checking your images in Docker Hub
------------------------------------
	WHAT HAPPENS IF WE PUSH THE IMAGE BUT WITH ANOTHER TAG?

$ docker tag our-web-server carlosnunez/our-web-server:0.0.2

$ docker push carlosnunez/our-web-server:0.0.2


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Challenge: Starting NGINX
---------------------------

* Challenge 1
-------------
. Start an instance of NGINX in Docker with the included website

. Name the container "website"

. Website should be accessible at http://localhost:8080

. Ensure that the container is removed when done

. Map $PWD/website to /usr/share/nginx/html if you volume mount 

. Have fun!


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Solution: Starting NGINX
--------------------------
	THE CHALLENGE WAS TO SERVE A WEBSITE ON ENGINE X WITH DOCKER, GIVEN SOME CONFIGURATION AND THE STATIC SITE. 

	THE FIRST PIECE OF INFORMATION THAT WE'RE GIVEN IS TO USE THE ENGINE X IMAGE FROM DOCKER HUB (WE DON'T NEED TO CREATE AN IMAGE)

	NEXT, WE WERE TOLD TO NAME OUR CONTAINER "website"

$ docker run --name website -v "$PWD/website:/usr/share/nginx/html" -p 8080:80 --rm nginx


------------------------------------------------------------------------------------------------------------------------------------------------------------------



	





















































	

	


 





































	





